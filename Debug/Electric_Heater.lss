
Electric_Heater.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000008c8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000008c8  0000095c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000021  0080006a  0080006a  00000966  2**0
                  ALLOC
  3 .comment      00000060  00000000  00000000  00000966  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000009c8  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000a04  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   000015fe  00000000  00000000  00000c0c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000ba6  00000000  00000000  0000220a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000f3c  00000000  00000000  00002db0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000398  00000000  00000000  00003cec  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000084b  00000000  00000000  00004084  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000551  00000000  00000000  000048cf  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000178  00000000  00000000  00004e20  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 5c 00 	jmp	0xb8	; 0xb8 <__vector_3>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 94 00 	jmp	0x128	; 0x128 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 a3 00 	jmp	0x146	; 0x146 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e8 ec       	ldi	r30, 0xC8	; 200
  68:	f8 e0       	ldi	r31, 0x08	; 8
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	ab 38       	cpi	r26, 0x8B	; 139
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 62 04 	jmp	0x8c4	; 0x8c4 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
#include <util/delay.h>

int main(void)
{
	
	A_System_Init();
  92:	0e 94 e0 01 	call	0x3c0	; 0x3c0 <A_System_Init>
	
	while(1)
	{
		switch (App_u8_CurrState)
  96:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <App_u8_CurrState>
  9a:	81 30       	cpi	r24, 0x01	; 1
  9c:	21 f0       	breq	.+8      	; 0xa6 <main+0x14>
  9e:	30 f0       	brcs	.+12     	; 0xac <main+0x1a>
  a0:	82 30       	cpi	r24, 0x02	; 2
  a2:	39 f0       	breq	.+14     	; 0xb2 <main+0x20>
  a4:	fa cf       	rjmp	.-12     	; 0x9a <main+0x8>
		{
			case ON:
			{
				A_System_OnState();
  a6:	0e 94 80 01 	call	0x300	; 0x300 <A_System_OnState>
				break;
  aa:	f5 cf       	rjmp	.-22     	; 0x96 <main+0x4>
			}
			case OFF:
			{
				A_System_OffState();
  ac:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <A_System_OffState>
				break;
  b0:	f2 cf       	rjmp	.-28     	; 0x96 <main+0x4>
			}
			case SETTING:
			{
				A_System_SetState();
  b2:	0e 94 da 00 	call	0x1b4	; 0x1b4 <A_System_SetState>
				break;
  b6:	ef cf       	rjmp	.-34     	; 0x96 <main+0x4>

000000b8 <__vector_3>:


/******ON/OFF Button ISR********/

ISR(INT2_vect)
{
  b8:	1f 92       	push	r1
  ba:	0f 92       	push	r0
  bc:	0f b6       	in	r0, 0x3f	; 63
  be:	0f 92       	push	r0
  c0:	11 24       	eor	r1, r1
  c2:	2f 93       	push	r18
  c4:	3f 93       	push	r19
  c6:	4f 93       	push	r20
  c8:	5f 93       	push	r21
  ca:	6f 93       	push	r22
  cc:	7f 93       	push	r23
  ce:	8f 93       	push	r24
  d0:	9f 93       	push	r25
  d2:	af 93       	push	r26
  d4:	bf 93       	push	r27
  d6:	ef 93       	push	r30
  d8:	ff 93       	push	r31
	if(App_u8_CurrState == OFF)
  da:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <App_u8_CurrState>
  de:	81 11       	cpse	r24, r1
  e0:	0d c0       	rjmp	.+26     	; 0xfc <__vector_3+0x44>
	{
		App_u8_CurrState = ON;
  e2:	81 e0       	ldi	r24, 0x01	; 1
  e4:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <App_u8_CurrState>
		App_u16_DesiredTemp = M_Eeprom_Read(0x0000);
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	90 e0       	ldi	r25, 0x00	; 0
  ec:	0e 94 c1 02 	call	0x582	; 0x582 <M_Eeprom_Read>
  f0:	90 e0       	ldi	r25, 0x00	; 0
  f2:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <App_u16_DesiredTemp+0x1>
  f6:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <App_u16_DesiredTemp>
  fa:	05 c0       	rjmp	.+10     	; 0x106 <__vector_3+0x4e>
	}
	else if (App_u8_CurrState==ON || App_u8_CurrState==SETTING)
  fc:	81 50       	subi	r24, 0x01	; 1
  fe:	82 30       	cpi	r24, 0x02	; 2
 100:	10 f4       	brcc	.+4      	; 0x106 <__vector_3+0x4e>
	{
		App_u8_CurrState = OFF;
 102:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <App_u8_CurrState>
	}
}
 106:	ff 91       	pop	r31
 108:	ef 91       	pop	r30
 10a:	bf 91       	pop	r27
 10c:	af 91       	pop	r26
 10e:	9f 91       	pop	r25
 110:	8f 91       	pop	r24
 112:	7f 91       	pop	r23
 114:	6f 91       	pop	r22
 116:	5f 91       	pop	r21
 118:	4f 91       	pop	r20
 11a:	3f 91       	pop	r19
 11c:	2f 91       	pop	r18
 11e:	0f 90       	pop	r0
 120:	0f be       	out	0x3f, r0	; 63
 122:	0f 90       	pop	r0
 124:	1f 90       	pop	r1
 126:	18 95       	reti

00000128 <__vector_7>:

/****TIMER1_ISR (A) : It triggers the ISR every 100ms. So, it makes the temperature
measure flag equals one to enable the ADC to do the work.*****/

ISR(TIMER1_COMPA_vect)
{
 128:	1f 92       	push	r1
 12a:	0f 92       	push	r0
 12c:	0f b6       	in	r0, 0x3f	; 63
 12e:	0f 92       	push	r0
 130:	11 24       	eor	r1, r1
 132:	8f 93       	push	r24
	App_u8_TempMeasureF = 1;
 134:	81 e0       	ldi	r24, 0x01	; 1
 136:	80 93 6f 00 	sts	0x006F, r24	; 0x80006f <App_u8_TempMeasureF>
}
 13a:	8f 91       	pop	r24
 13c:	0f 90       	pop	r0
 13e:	0f be       	out	0x3f, r0	; 63
 140:	0f 90       	pop	r0
 142:	1f 90       	pop	r1
 144:	18 95       	reti

00000146 <__vector_10>:
toggle flag for the LED and the Seven Segment. and counts to keep it in
ON_STATE if nothing is pressed during in ON or SETTING modes for 5 secs.
**********/

ISR(TIMER0_COMP_vect)
{
 146:	1f 92       	push	r1
 148:	0f 92       	push	r0
 14a:	0f b6       	in	r0, 0x3f	; 63
 14c:	0f 92       	push	r0
 14e:	11 24       	eor	r1, r1
 150:	2f 93       	push	r18
 152:	3f 93       	push	r19
 154:	8f 93       	push	r24
 156:	9f 93       	push	r25
	if ((App_u8_CurrState==SETTING) || (App_u8_CurrState==ON))
 158:	80 91 88 00 	lds	r24, 0x0088	; 0x800088 <App_u8_CurrState>
 15c:	81 50       	subi	r24, 0x01	; 1
 15e:	82 30       	cpi	r24, 0x02	; 2
 160:	b8 f4       	brcc	.+46     	; 0x190 <__vector_10+0x4a>
	{
		App_u8_SettingCounter++;
 162:	80 91 73 00 	lds	r24, 0x0073	; 0x800073 <App_u8_SettingCounter>
 166:	8f 5f       	subi	r24, 0xFF	; 255
 168:	80 93 73 00 	sts	0x0073, r24	; 0x800073 <App_u8_SettingCounter>
		if(App_u8_SettingCounter % 4 == 0)
 16c:	98 2f       	mov	r25, r24
 16e:	93 70       	andi	r25, 0x03	; 3
 170:	51 f4       	brne	.+20     	; 0x186 <__vector_10+0x40>
		{
			App_u16_ToggleF ^= 1;
 172:	20 91 6b 00 	lds	r18, 0x006B	; 0x80006b <App_u16_ToggleF>
 176:	30 91 6c 00 	lds	r19, 0x006C	; 0x80006c <App_u16_ToggleF+0x1>
 17a:	91 e0       	ldi	r25, 0x01	; 1
 17c:	29 27       	eor	r18, r25
 17e:	30 93 6c 00 	sts	0x006C, r19	; 0x80006c <App_u16_ToggleF+0x1>
 182:	20 93 6b 00 	sts	0x006B, r18	; 0x80006b <App_u16_ToggleF>
		}
		if (App_u8_SettingCounter > 20)
 186:	85 31       	cpi	r24, 0x15	; 21
 188:	18 f0       	brcs	.+6      	; 0x190 <__vector_10+0x4a>
		{
			App_u8_CurrState = ON;
 18a:	81 e0       	ldi	r24, 0x01	; 1
 18c:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <App_u8_CurrState>
		}
	}
 190:	9f 91       	pop	r25
 192:	8f 91       	pop	r24
 194:	3f 91       	pop	r19
 196:	2f 91       	pop	r18
 198:	0f 90       	pop	r0
 19a:	0f be       	out	0x3f, r0	; 63
 19c:	0f 90       	pop	r0
 19e:	1f 90       	pop	r1
 1a0:	18 95       	reti

000001a2 <A_System_OffState>:
}
/*---------------------------------------------------------------------*/

void A_System_OffState(void)
{
	H_Ssd_TurnOff();
 1a2:	0e 94 69 02 	call	0x4d2	; 0x4d2 <H_Ssd_TurnOff>
	H_Led_Off();
 1a6:	0e 94 53 02 	call	0x4a6	; 0x4a6 <H_Led_Off>
	H_HeatStop();
 1aa:	0e 94 4a 02 	call	0x494	; 0x494 <H_HeatStop>
	H_CoolStop();
 1ae:	0e 94 4c 02 	call	0x498	; 0x498 <H_CoolStop>
 1b2:	08 95       	ret

000001b4 <A_System_SetState>:
}


void A_System_SetState(void)
{
	H_HeatStop();
 1b4:	0e 94 4a 02 	call	0x494	; 0x494 <H_HeatStop>
	H_CoolStop();
 1b8:	0e 94 4c 02 	call	0x498	; 0x498 <H_CoolStop>
	H_Led_Off();
 1bc:	0e 94 53 02 	call	0x4a6	; 0x4a6 <H_Led_Off>
	
	// to toggle the seven segment
	// while writing the desired temperature
	
	if(App_u16_ToggleF == 1)
 1c0:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <App_u16_ToggleF>
 1c4:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <App_u16_ToggleF+0x1>
 1c8:	01 97       	sbiw	r24, 0x01	; 1
 1ca:	39 f4       	brne	.+14     	; 0x1da <A_System_SetState+0x26>
	{
		H_Ssd_Write(App_u16_DesiredTemp);
 1cc:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <App_u16_DesiredTemp>
 1d0:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <App_u16_DesiredTemp+0x1>
 1d4:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <H_Ssd_Write>
 1d8:	02 c0       	rjmp	.+4      	; 0x1de <A_System_SetState+0x2a>
	}
	else
	{
		H_Ssd_TurnOff();
 1da:	0e 94 69 02 	call	0x4d2	; 0x4d2 <H_Ssd_TurnOff>
	}
	
	// if UP or DOWN pressed, change the desired temp
	// as long as it's still in range
	
	if((H_Buttons_UpPressed() == PRESSED) && (App_u16_DesiredTemp < MAX_TEMP))
 1de:	0e 94 21 02 	call	0x442	; 0x442 <H_Buttons_UpPressed>
 1e2:	81 30       	cpi	r24, 0x01	; 1
 1e4:	89 f4       	brne	.+34     	; 0x208 <A_System_SetState+0x54>
 1e6:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <App_u16_DesiredTemp>
 1ea:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <App_u16_DesiredTemp+0x1>
 1ee:	8b 34       	cpi	r24, 0x4B	; 75
 1f0:	91 05       	cpc	r25, r1
 1f2:	50 f4       	brcc	.+20     	; 0x208 <A_System_SetState+0x54>
	{
		App_u16_DesiredTemp = App_u16_DesiredTemp + 5;
 1f4:	05 96       	adiw	r24, 0x05	; 5
 1f6:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <App_u16_DesiredTemp+0x1>
 1fa:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <App_u16_DesiredTemp>
		App_u8_SettingCounter = 0;
 1fe:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <App_u8_SettingCounter>
		H_Ssd_Write(App_u16_DesiredTemp);
 202:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <H_Ssd_Write>
 206:	14 c0       	rjmp	.+40     	; 0x230 <A_System_SetState+0x7c>
	}
	else if ((H_Buttons_DownPressed() == PRESSED) && (App_u16_DesiredTemp > MIN_TEMP))
 208:	0e 94 31 02 	call	0x462	; 0x462 <H_Buttons_DownPressed>
 20c:	81 30       	cpi	r24, 0x01	; 1
 20e:	81 f4       	brne	.+32     	; 0x230 <A_System_SetState+0x7c>
 210:	80 91 89 00 	lds	r24, 0x0089	; 0x800089 <App_u16_DesiredTemp>
 214:	90 91 8a 00 	lds	r25, 0x008A	; 0x80008a <App_u16_DesiredTemp+0x1>
 218:	84 32       	cpi	r24, 0x24	; 36
 21a:	91 05       	cpc	r25, r1
 21c:	48 f0       	brcs	.+18     	; 0x230 <A_System_SetState+0x7c>
	{
		App_u16_DesiredTemp = App_u16_DesiredTemp - 5;
 21e:	05 97       	sbiw	r24, 0x05	; 5
 220:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <App_u16_DesiredTemp+0x1>
 224:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <App_u16_DesiredTemp>
		App_u8_SettingCounter = 0;
 228:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <App_u8_SettingCounter>
		H_Ssd_Write(App_u16_DesiredTemp);
 22c:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <H_Ssd_Write>
	}
	
	M_Eeprom_Write(0x0000,App_u16_DesiredTemp);
 230:	60 91 89 00 	lds	r22, 0x0089	; 0x800089 <App_u16_DesiredTemp>
 234:	80 e0       	ldi	r24, 0x00	; 0
 236:	90 e0       	ldi	r25, 0x00	; 0
 238:	0e 94 c6 02 	call	0x58c	; 0x58c <M_Eeprom_Write>
 23c:	08 95       	ret

0000023e <A_System_ChangeTemp>:
	
}

void A_System_ChangeTemp(void)
{
	if( (App_u16_DesiredTemp < App_u16_AvgTemp + MARGIN_TEMP) && (App_u16_DesiredTemp > App_u16_AvgTemp - MARGIN_TEMP) )
 23e:	80 91 71 00 	lds	r24, 0x0071	; 0x800071 <App_u16_AvgTemp>
 242:	90 91 72 00 	lds	r25, 0x0072	; 0x800072 <App_u16_AvgTemp+0x1>
 246:	20 91 89 00 	lds	r18, 0x0089	; 0x800089 <App_u16_DesiredTemp>
 24a:	30 91 8a 00 	lds	r19, 0x008A	; 0x80008a <App_u16_DesiredTemp+0x1>
 24e:	ac 01       	movw	r20, r24
 250:	4b 5f       	subi	r20, 0xFB	; 251
 252:	5f 4f       	sbci	r21, 0xFF	; 255
 254:	24 17       	cp	r18, r20
 256:	35 07       	cpc	r19, r21
 258:	90 f4       	brcc	.+36     	; 0x27e <A_System_ChangeTemp+0x40>
 25a:	05 97       	sbiw	r24, 0x05	; 5
 25c:	82 17       	cp	r24, r18
 25e:	93 07       	cpc	r25, r19
 260:	38 f4       	brcc	.+14     	; 0x270 <A_System_ChangeTemp+0x32>
	{
		// Actual Temperature equals Desired Temperature
		// No need for Heating or Cooling
		H_HeatStop();
 262:	0e 94 4a 02 	call	0x494	; 0x494 <H_HeatStop>
		H_CoolStop();
 266:	0e 94 4c 02 	call	0x498	; 0x498 <H_CoolStop>
		H_Led_Off();
 26a:	0e 94 53 02 	call	0x4a6	; 0x4a6 <H_Led_Off>
 26e:	08 95       	ret
	else if(App_u16_DesiredTemp < App_u16_AvgTemp + MARGIN_TEMP)
	{
		// Actual Temperature is Larger
		// we need the Cooling element
		
		H_HeatStop();
 270:	0e 94 4a 02 	call	0x494	; 0x494 <H_HeatStop>
		H_CoolStart();
 274:	0e 94 48 02 	call	0x490	; 0x490 <H_CoolStart>
		H_Led_On();
 278:	0e 94 51 02 	call	0x4a2	; 0x4a2 <H_Led_On>
 27c:	08 95       	ret
	}
	else if (App_u16_DesiredTemp > App_u16_AvgTemp - MARGIN_TEMP)
 27e:	05 97       	sbiw	r24, 0x05	; 5
 280:	82 17       	cp	r24, r18
 282:	93 07       	cpc	r25, r19
 284:	78 f4       	brcc	.+30     	; 0x2a4 <A_System_ChangeTemp+0x66>
	{
		// Actual Temperature is Smaller
		// we need the Heating element
		
		H_HeatStart();
 286:	0e 94 46 02 	call	0x48c	; 0x48c <H_HeatStart>
		H_CoolStop();
 28a:	0e 94 4c 02 	call	0x498	; 0x498 <H_CoolStop>
		if (App_u16_ToggleF == 1)
 28e:	80 91 6b 00 	lds	r24, 0x006B	; 0x80006b <App_u16_ToggleF>
 292:	90 91 6c 00 	lds	r25, 0x006C	; 0x80006c <App_u16_ToggleF+0x1>
 296:	01 97       	sbiw	r24, 0x01	; 1
 298:	19 f4       	brne	.+6      	; 0x2a0 <A_System_ChangeTemp+0x62>
		{
			H_Led_On();
 29a:	0e 94 51 02 	call	0x4a2	; 0x4a2 <H_Led_On>
 29e:	08 95       	ret
		}
		else 
		{
			H_Led_Off();
 2a0:	0e 94 53 02 	call	0x4a6	; 0x4a6 <H_Led_Off>
 2a4:	08 95       	ret

000002a6 <A_System_AddNewTemp>:
	App_u8_ArrCounter = 0;
}

void A_System_AddNewTemp(u16 * arr , u16 new_val)
{
	arr[App_u8_ArrCounter] = new_val;
 2a6:	20 91 6a 00 	lds	r18, 0x006A	; 0x80006a <__data_end>
 2aa:	30 e0       	ldi	r19, 0x00	; 0
 2ac:	22 0f       	add	r18, r18
 2ae:	33 1f       	adc	r19, r19
 2b0:	82 0f       	add	r24, r18
 2b2:	93 1f       	adc	r25, r19
 2b4:	fc 01       	movw	r30, r24
 2b6:	71 83       	std	Z+1, r23	; 0x01
 2b8:	60 83       	st	Z, r22
	App_u8_ArrCounter++;
 2ba:	80 91 6a 00 	lds	r24, 0x006A	; 0x80006a <__data_end>
 2be:	8f 5f       	subi	r24, 0xFF	; 255
	
	if (App_u8_ArrCounter == 10)
 2c0:	8a 30       	cpi	r24, 0x0A	; 10
 2c2:	19 f0       	breq	.+6      	; 0x2ca <A_System_AddNewTemp+0x24>
}

void A_System_AddNewTemp(u16 * arr , u16 new_val)
{
	arr[App_u8_ArrCounter] = new_val;
	App_u8_ArrCounter++;
 2c4:	80 93 6a 00 	sts	0x006A, r24	; 0x80006a <__data_end>
 2c8:	08 95       	ret
	
	if (App_u8_ArrCounter == 10)
	{
		App_u8_ArrCounter = 0;
 2ca:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
 2ce:	08 95       	ret

000002d0 <A_System_CalcAvgTemp>:
	}
}

u16 A_System_CalcAvgTemp(u16 * arr)
{
 2d0:	fc 01       	movw	r30, r24
 2d2:	ac 01       	movw	r20, r24
 2d4:	4c 5e       	subi	r20, 0xEC	; 236
 2d6:	5f 4f       	sbci	r21, 0xFF	; 255
	u16 Local_u16_Sum = 0;
 2d8:	20 e0       	ldi	r18, 0x00	; 0
 2da:	30 e0       	ldi	r19, 0x00	; 0
	u16 Local_u16_Avg;
	
	for(u8 i=0; i<NUM_OF_TEMP_MEASURES; i++)
	{
		Local_u16_Sum = Local_u16_Sum + arr[i];
 2dc:	81 91       	ld	r24, Z+
 2de:	91 91       	ld	r25, Z+
 2e0:	28 0f       	add	r18, r24
 2e2:	39 1f       	adc	r19, r25
u16 A_System_CalcAvgTemp(u16 * arr)
{
	u16 Local_u16_Sum = 0;
	u16 Local_u16_Avg;
	
	for(u8 i=0; i<NUM_OF_TEMP_MEASURES; i++)
 2e4:	e4 17       	cp	r30, r20
 2e6:	f5 07       	cpc	r31, r21
 2e8:	c9 f7       	brne	.-14     	; 0x2dc <A_System_CalcAvgTemp+0xc>
	{
		Local_u16_Sum = Local_u16_Sum + arr[i];
	}
	Local_u16_Avg = (u16) Local_u16_Sum / NUM_OF_TEMP_MEASURES;
	return Local_u16_Avg;
 2ea:	ad ec       	ldi	r26, 0xCD	; 205
 2ec:	bc ec       	ldi	r27, 0xCC	; 204
 2ee:	0e 94 3f 04 	call	0x87e	; 0x87e <__umulhisi3>
}
 2f2:	96 95       	lsr	r25
 2f4:	87 95       	ror	r24
 2f6:	96 95       	lsr	r25
 2f8:	87 95       	ror	r24
 2fa:	96 95       	lsr	r25
 2fc:	87 95       	ror	r24
 2fe:	08 95       	ret

00000300 <A_System_OnState>:
{
	// if 100ms elapsed and flag is triggered
	// measure temperature from the sensor
	// add it to array and get the average
	
	if (App_u8_TempMeasureF == 1)
 300:	80 91 6f 00 	lds	r24, 0x006F	; 0x80006f <App_u8_TempMeasureF>
 304:	81 30       	cpi	r24, 0x01	; 1
 306:	09 f5       	brne	.+66     	; 0x34a <A_System_OnState+0x4a>
	{
		App_u16_ActualTemp = (M_Adc_Read()*0.5);
 308:	0e 94 b8 02 	call	0x570	; 0x570 <M_Adc_Read>
 30c:	bc 01       	movw	r22, r24
 30e:	80 e0       	ldi	r24, 0x00	; 0
 310:	90 e0       	ldi	r25, 0x00	; 0
 312:	0e 94 30 03 	call	0x660	; 0x660 <__floatunsisf>
 316:	20 e0       	ldi	r18, 0x00	; 0
 318:	30 e0       	ldi	r19, 0x00	; 0
 31a:	40 e0       	ldi	r20, 0x00	; 0
 31c:	5f e3       	ldi	r21, 0x3F	; 63
 31e:	0e 94 96 03 	call	0x72c	; 0x72c <__mulsf3>
 322:	0e 94 01 03 	call	0x602	; 0x602 <__fixunssfsi>
 326:	70 93 6e 00 	sts	0x006E, r23	; 0x80006e <App_u16_ActualTemp+0x1>
 32a:	60 93 6d 00 	sts	0x006D, r22	; 0x80006d <App_u16_ActualTemp>
		A_System_AddNewTemp(App_u16_TempArr , App_u16_ActualTemp);
 32e:	84 e7       	ldi	r24, 0x74	; 116
 330:	90 e0       	ldi	r25, 0x00	; 0
 332:	0e 94 53 01 	call	0x2a6	; 0x2a6 <A_System_AddNewTemp>
		App_u16_AvgTemp = A_System_CalcAvgTemp(App_u16_TempArr);
 336:	84 e7       	ldi	r24, 0x74	; 116
 338:	90 e0       	ldi	r25, 0x00	; 0
 33a:	0e 94 68 01 	call	0x2d0	; 0x2d0 <A_System_CalcAvgTemp>
 33e:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <App_u16_AvgTemp+0x1>
 342:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <App_u16_AvgTemp>
		App_u8_TempMeasureF = 0;
 346:	10 92 6f 00 	sts	0x006F, r1	; 0x80006f <App_u8_TempMeasureF>
	}
	
	H_Ssd_Write(App_u16_ActualTemp);
 34a:	80 91 6d 00 	lds	r24, 0x006D	; 0x80006d <App_u16_ActualTemp>
 34e:	90 91 6e 00 	lds	r25, 0x006E	; 0x80006e <App_u16_ActualTemp+0x1>
 352:	0e 94 6b 02 	call	0x4d6	; 0x4d6 <H_Ssd_Write>
	
	// turn cooler or heater ON and OFF depending on
	// the average temperature measured from the array.
	
	A_System_ChangeTemp();
 356:	0e 94 1f 01 	call	0x23e	; 0x23e <A_System_ChangeTemp>
	
	// Check if UP or DOWN buttons are pressed to
	// switch to the SETTING_MODE
	
	if(H_Buttons_UpPressed() == PRESSED || H_Buttons_DownPressed() == PRESSED)
 35a:	0e 94 21 02 	call	0x442	; 0x442 <H_Buttons_UpPressed>
 35e:	81 30       	cpi	r24, 0x01	; 1
 360:	21 f0       	breq	.+8      	; 0x36a <A_System_OnState+0x6a>
 362:	0e 94 31 02 	call	0x462	; 0x462 <H_Buttons_DownPressed>
 366:	81 30       	cpi	r24, 0x01	; 1
 368:	39 f4       	brne	.+14     	; 0x378 <A_System_OnState+0x78>
	{

		H_Ssd_Disable();
 36a:	0e 94 5f 02 	call	0x4be	; 0x4be <H_Ssd_Disable>
		App_u8_SettingCounter = 0;
 36e:	10 92 73 00 	sts	0x0073, r1	; 0x800073 <App_u8_SettingCounter>
		App_u8_CurrState = SETTING;
 372:	82 e0       	ldi	r24, 0x02	; 2
 374:	80 93 88 00 	sts	0x0088, r24	; 0x800088 <App_u8_CurrState>
 378:	08 95       	ret

0000037a <A_System_TempArrInit>:
	}
}

void A_System_TempArrInit(void)
{
	u16 Local_u16_FirstTemp = M_Adc_Read()*0.5;
 37a:	0e 94 b8 02 	call	0x570	; 0x570 <M_Adc_Read>
 37e:	bc 01       	movw	r22, r24
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	90 e0       	ldi	r25, 0x00	; 0
 384:	0e 94 30 03 	call	0x660	; 0x660 <__floatunsisf>
 388:	20 e0       	ldi	r18, 0x00	; 0
 38a:	30 e0       	ldi	r19, 0x00	; 0
 38c:	40 e0       	ldi	r20, 0x00	; 0
 38e:	5f e3       	ldi	r21, 0x3F	; 63
 390:	0e 94 96 03 	call	0x72c	; 0x72c <__mulsf3>
 394:	0e 94 01 03 	call	0x602	; 0x602 <__fixunssfsi>
 398:	e4 e7       	ldi	r30, 0x74	; 116
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	88 e8       	ldi	r24, 0x88	; 136
 39e:	90 e0       	ldi	r25, 0x00	; 0
	
	for (u8 i = 0; i<NUM_OF_TEMP_MEASURES; i++)
	{
		App_u16_TempArr[i]= Local_u16_FirstTemp;
 3a0:	61 93       	st	Z+, r22
 3a2:	71 93       	st	Z+, r23

void A_System_TempArrInit(void)
{
	u16 Local_u16_FirstTemp = M_Adc_Read()*0.5;
	
	for (u8 i = 0; i<NUM_OF_TEMP_MEASURES; i++)
 3a4:	e8 17       	cp	r30, r24
 3a6:	f9 07       	cpc	r31, r25
 3a8:	d9 f7       	brne	.-10     	; 0x3a0 <A_System_TempArrInit+0x26>
	{
		App_u16_TempArr[i]= Local_u16_FirstTemp;
	}
	
	App_u16_AvgTemp = A_System_CalcAvgTemp(App_u16_TempArr);
 3aa:	84 e7       	ldi	r24, 0x74	; 116
 3ac:	90 e0       	ldi	r25, 0x00	; 0
 3ae:	0e 94 68 01 	call	0x2d0	; 0x2d0 <A_System_CalcAvgTemp>
 3b2:	90 93 72 00 	sts	0x0072, r25	; 0x800072 <App_u16_AvgTemp+0x1>
 3b6:	80 93 71 00 	sts	0x0071, r24	; 0x800071 <App_u16_AvgTemp>
	App_u8_ArrCounter = 0;
 3ba:	10 92 6a 00 	sts	0x006A, r1	; 0x80006a <__data_end>
 3be:	08 95       	ret

000003c0 <A_System_Init>:
#include "System.h"

void A_System_Init(void)
{
	// Modules initialization
	M_Adc_Init();
 3c0:	0e 94 ac 02 	call	0x558	; 0x558 <M_Adc_Init>
	H_ButtonsInit();
 3c4:	0e 94 13 02 	call	0x426	; 0x426 <H_ButtonsInit>
	H_CoolInit();
 3c8:	0e 94 44 02 	call	0x488	; 0x488 <H_CoolInit>
	H_HeatInit();
 3cc:	0e 94 42 02 	call	0x484	; 0x484 <H_HeatInit>
	H_Led_Init();
 3d0:	0e 94 4e 02 	call	0x49c	; 0x49c <H_Led_Init>
	H_Ssd_Init();
 3d4:	0e 94 62 02 	call	0x4c4	; 0x4c4 <H_Ssd_Init>
	M_Timer0_Init();
 3d8:	0e 94 ed 02 	call	0x5da	; 0x5da <M_Timer0_Init>
	M_Timer1_Init();
 3dc:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <M_Timer1_Init>
	M_Timer1_IntEnable();
 3e0:	0e 94 fd 02 	call	0x5fa	; 0x5fa <M_Timer1_IntEnable>
	
	// ON_OFF_flag is in OFF mode initially
	App_u8_CurrState = OFF;
 3e4:	10 92 88 00 	sts	0x0088, r1	; 0x800088 <App_u8_CurrState>
	
	// setting initial temp. and fill array
	if(M_Eeprom_Read(0x0000) != 0xFF)
 3e8:	80 e0       	ldi	r24, 0x00	; 0
 3ea:	90 e0       	ldi	r25, 0x00	; 0
 3ec:	0e 94 c1 02 	call	0x582	; 0x582 <M_Eeprom_Read>
 3f0:	8f 3f       	cpi	r24, 0xFF	; 255
 3f2:	51 f0       	breq	.+20     	; 0x408 <__EEPROM_REGION_LENGTH__+0x8>
	{
		App_u16_DesiredTemp = M_Eeprom_Read(0x0000);
 3f4:	80 e0       	ldi	r24, 0x00	; 0
 3f6:	90 e0       	ldi	r25, 0x00	; 0
 3f8:	0e 94 c1 02 	call	0x582	; 0x582 <M_Eeprom_Read>
 3fc:	90 e0       	ldi	r25, 0x00	; 0
 3fe:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <App_u16_DesiredTemp+0x1>
 402:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <App_u16_DesiredTemp>
 406:	06 c0       	rjmp	.+12     	; 0x414 <__EEPROM_REGION_LENGTH__+0x14>
	}
	else
	{
		App_u16_DesiredTemp = INIT_DESIRED_TEMP;
 408:	82 e3       	ldi	r24, 0x32	; 50
 40a:	90 e0       	ldi	r25, 0x00	; 0
 40c:	90 93 8a 00 	sts	0x008A, r25	; 0x80008a <App_u16_DesiredTemp+0x1>
 410:	80 93 89 00 	sts	0x0089, r24	; 0x800089 <App_u16_DesiredTemp>
	}
	
	A_System_TempArrInit();
 414:	0e 94 bd 01 	call	0x37a	; 0x37a <A_System_TempArrInit>
	
	// Save desired temp in EEPROM
	// which is the INIT_DESIRED_TEMP.
	M_Eeprom_Write(0x0000,(u8) App_u16_DesiredTemp);
 418:	60 91 89 00 	lds	r22, 0x0089	; 0x800089 <App_u16_DesiredTemp>
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
 420:	0e 94 c6 02 	call	0x58c	; 0x58c <M_Eeprom_Write>
 424:	08 95       	ret

00000426 <H_ButtonsInit>:
 426:	ba 98       	cbi	0x17, 2	; 23
 428:	b9 98       	cbi	0x17, 1	; 23
 42a:	bb 98       	cbi	0x17, 3	; 23
 42c:	c2 9a       	sbi	0x18, 2	; 24
 42e:	c1 9a       	sbi	0x18, 1	; 24
 430:	c3 9a       	sbi	0x18, 3	; 24
 432:	78 94       	sei
 434:	84 b7       	in	r24, 0x34	; 52
 436:	80 64       	ori	r24, 0x40	; 64
 438:	84 bf       	out	0x34, r24	; 52
 43a:	8b b7       	in	r24, 0x3b	; 59
 43c:	80 62       	ori	r24, 0x20	; 32
 43e:	8b bf       	out	0x3b, r24	; 59
 440:	08 95       	ret

00000442 <H_Buttons_UpPressed>:
 442:	b1 99       	sbic	0x16, 1	; 22
 444:	0c c0       	rjmp	.+24     	; 0x45e <H_Buttons_UpPressed+0x1c>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 446:	87 ea       	ldi	r24, 0xA7	; 167
 448:	91 e6       	ldi	r25, 0x61	; 97
 44a:	01 97       	sbiw	r24, 0x01	; 1
 44c:	f1 f7       	brne	.-4      	; 0x44a <H_Buttons_UpPressed+0x8>
 44e:	00 c0       	rjmp	.+0      	; 0x450 <H_Buttons_UpPressed+0xe>
 450:	00 00       	nop
 452:	86 b3       	in	r24, 0x16	; 22
 454:	86 95       	lsr	r24
 456:	81 70       	andi	r24, 0x01	; 1
 458:	91 e0       	ldi	r25, 0x01	; 1
 45a:	89 27       	eor	r24, r25
 45c:	08 95       	ret
 45e:	80 e0       	ldi	r24, 0x00	; 0
 460:	08 95       	ret

00000462 <H_Buttons_DownPressed>:
 462:	b3 99       	sbic	0x16, 3	; 22
 464:	0d c0       	rjmp	.+26     	; 0x480 <H_Buttons_DownPressed+0x1e>
 466:	87 ea       	ldi	r24, 0xA7	; 167
 468:	91 e6       	ldi	r25, 0x61	; 97
 46a:	01 97       	sbiw	r24, 0x01	; 1
 46c:	f1 f7       	brne	.-4      	; 0x46a <H_Buttons_DownPressed+0x8>
 46e:	00 c0       	rjmp	.+0      	; 0x470 <H_Buttons_DownPressed+0xe>
 470:	00 00       	nop
 472:	86 b3       	in	r24, 0x16	; 22
 474:	83 fb       	bst	r24, 3
 476:	99 27       	eor	r25, r25
 478:	90 f9       	bld	r25, 0
 47a:	81 e0       	ldi	r24, 0x01	; 1
 47c:	89 27       	eor	r24, r25
 47e:	08 95       	ret
 480:	80 e0       	ldi	r24, 0x00	; 0
 482:	08 95       	ret

00000484 <H_HeatInit>:
 484:	bc 9a       	sbi	0x17, 4	; 23
 486:	08 95       	ret

00000488 <H_CoolInit>:
 488:	bd 9a       	sbi	0x17, 5	; 23
 48a:	08 95       	ret

0000048c <H_HeatStart>:
 48c:	c4 9a       	sbi	0x18, 4	; 24
 48e:	08 95       	ret

00000490 <H_CoolStart>:
 490:	c5 9a       	sbi	0x18, 5	; 24
 492:	08 95       	ret

00000494 <H_HeatStop>:
 494:	c4 98       	cbi	0x18, 4	; 24
 496:	08 95       	ret

00000498 <H_CoolStop>:
 498:	c5 98       	cbi	0x18, 5	; 24
 49a:	08 95       	ret

0000049c <H_Led_Init>:
 49c:	b8 9a       	sbi	0x17, 0	; 23
 49e:	c0 98       	cbi	0x18, 0	; 24
 4a0:	08 95       	ret

000004a2 <H_Led_On>:
 4a2:	c0 9a       	sbi	0x18, 0	; 24
 4a4:	08 95       	ret

000004a6 <H_Led_Off>:
 4a6:	c0 98       	cbi	0x18, 0	; 24
 4a8:	08 95       	ret

000004aa <H_Ssd_Enable>:
 4aa:	81 30       	cpi	r24, 0x01	; 1
 4ac:	19 f4       	brne	.+6      	; 0x4b4 <H_Ssd_Enable+0xa>
 4ae:	c6 9a       	sbi	0x18, 6	; 24
 4b0:	c7 98       	cbi	0x18, 7	; 24
 4b2:	08 95       	ret
 4b4:	82 30       	cpi	r24, 0x02	; 2
 4b6:	11 f4       	brne	.+4      	; 0x4bc <H_Ssd_Enable+0x12>
 4b8:	c7 9a       	sbi	0x18, 7	; 24
 4ba:	c6 98       	cbi	0x18, 6	; 24
 4bc:	08 95       	ret

000004be <H_Ssd_Disable>:
 4be:	c6 98       	cbi	0x18, 6	; 24
 4c0:	c7 98       	cbi	0x18, 7	; 24
 4c2:	08 95       	ret

000004c4 <H_Ssd_Init>:
 4c4:	8f ef       	ldi	r24, 0xFF	; 255
 4c6:	81 bb       	out	0x11, r24	; 17
 4c8:	be 9a       	sbi	0x17, 6	; 23
 4ca:	bf 9a       	sbi	0x17, 7	; 23
 4cc:	0e 94 5f 02 	call	0x4be	; 0x4be <H_Ssd_Disable>
 4d0:	08 95       	ret

000004d2 <H_Ssd_TurnOff>:
 4d2:	12 ba       	out	0x12, r1	; 18
 4d4:	08 95       	ret

000004d6 <H_Ssd_Write>:
 4d6:	cf 93       	push	r28
 4d8:	df 93       	push	r29
 4da:	ec 01       	movw	r28, r24
 4dc:	81 e0       	ldi	r24, 0x01	; 1
 4de:	0e 94 55 02 	call	0x4aa	; 0x4aa <H_Ssd_Enable>
 4e2:	9e 01       	movw	r18, r28
 4e4:	ad ec       	ldi	r26, 0xCD	; 205
 4e6:	bc ec       	ldi	r27, 0xCC	; 204
 4e8:	0e 94 3f 04 	call	0x87e	; 0x87e <__umulhisi3>
 4ec:	96 95       	lsr	r25
 4ee:	87 95       	ror	r24
 4f0:	96 95       	lsr	r25
 4f2:	87 95       	ror	r24
 4f4:	96 95       	lsr	r25
 4f6:	87 95       	ror	r24
 4f8:	9c 01       	movw	r18, r24
 4fa:	22 0f       	add	r18, r18
 4fc:	33 1f       	adc	r19, r19
 4fe:	88 0f       	add	r24, r24
 500:	99 1f       	adc	r25, r25
 502:	88 0f       	add	r24, r24
 504:	99 1f       	adc	r25, r25
 506:	88 0f       	add	r24, r24
 508:	99 1f       	adc	r25, r25
 50a:	82 0f       	add	r24, r18
 50c:	93 1f       	adc	r25, r19
 50e:	fe 01       	movw	r30, r28
 510:	e8 1b       	sub	r30, r24
 512:	f9 0b       	sbc	r31, r25
 514:	ff 27       	eor	r31, r31
 516:	e0 5a       	subi	r30, 0xA0	; 160
 518:	ff 4f       	sbci	r31, 0xFF	; 255
 51a:	80 81       	ld	r24, Z
 51c:	82 bb       	out	0x12, r24	; 18
 51e:	81 ee       	ldi	r24, 0xE1	; 225
 520:	94 e0       	ldi	r25, 0x04	; 4
 522:	01 97       	sbiw	r24, 0x01	; 1
 524:	f1 f7       	brne	.-4      	; 0x522 <H_Ssd_Write+0x4c>
 526:	00 c0       	rjmp	.+0      	; 0x528 <H_Ssd_Write+0x52>
 528:	00 00       	nop
 52a:	82 e0       	ldi	r24, 0x02	; 2
 52c:	0e 94 55 02 	call	0x4aa	; 0x4aa <H_Ssd_Enable>
 530:	ce 01       	movw	r24, r28
 532:	6a e0       	ldi	r22, 0x0A	; 10
 534:	70 e0       	ldi	r23, 0x00	; 0
 536:	0e 94 2b 04 	call	0x856	; 0x856 <__divmodhi4>
 53a:	fb 01       	movw	r30, r22
 53c:	ff 27       	eor	r31, r31
 53e:	e0 5a       	subi	r30, 0xA0	; 160
 540:	ff 4f       	sbci	r31, 0xFF	; 255
 542:	80 81       	ld	r24, Z
 544:	82 bb       	out	0x12, r24	; 18
 546:	81 ee       	ldi	r24, 0xE1	; 225
 548:	94 e0       	ldi	r25, 0x04	; 4
 54a:	01 97       	sbiw	r24, 0x01	; 1
 54c:	f1 f7       	brne	.-4      	; 0x54a <H_Ssd_Write+0x74>
 54e:	00 c0       	rjmp	.+0      	; 0x550 <H_Ssd_Write+0x7a>
 550:	00 00       	nop
 552:	df 91       	pop	r29
 554:	cf 91       	pop	r28
 556:	08 95       	ret

00000558 <M_Adc_Init>:
 558:	3e 9a       	sbi	0x07, 6	; 7
 55a:	38 98       	cbi	0x07, 0	; 7
 55c:	39 98       	cbi	0x07, 1	; 7
 55e:	3a 98       	cbi	0x07, 2	; 7
 560:	3b 98       	cbi	0x07, 3	; 7
 562:	3c 98       	cbi	0x07, 4	; 7
 564:	3d 98       	cbi	0x07, 5	; 7
 566:	30 9a       	sbi	0x06, 0	; 6
 568:	31 98       	cbi	0x06, 1	; 6
 56a:	32 98       	cbi	0x06, 2	; 6
 56c:	37 9a       	sbi	0x06, 7	; 6
 56e:	08 95       	ret

00000570 <M_Adc_Read>:
 570:	36 9a       	sbi	0x06, 6	; 6
 572:	30 9b       	sbis	0x06, 0	; 6
 574:	fe cf       	rjmp	.-4      	; 0x572 <M_Adc_Read+0x2>
 576:	84 b1       	in	r24, 0x04	; 4
 578:	25 b1       	in	r18, 0x05	; 5
 57a:	34 9a       	sbi	0x06, 4	; 6
 57c:	90 e0       	ldi	r25, 0x00	; 0
 57e:	92 2b       	or	r25, r18
 580:	08 95       	ret

00000582 <M_Eeprom_Read>:
 582:	8e bb       	out	0x1e, r24	; 30
 584:	9f bb       	out	0x1f, r25	; 31
 586:	e0 9a       	sbi	0x1c, 0	; 28
 588:	8d b3       	in	r24, 0x1d	; 29
 58a:	08 95       	ret

0000058c <M_Eeprom_Write>:
 58c:	8e bb       	out	0x1e, r24	; 30
 58e:	9f bb       	out	0x1f, r25	; 31
 590:	6d bb       	out	0x1d, r22	; 29
 592:	0f b6       	in	r0, 0x3f	; 63
 594:	07 fe       	sbrs	r0, 7
 596:	05 c0       	rjmp	.+10     	; 0x5a2 <M_Eeprom_Write+0x16>
 598:	8f b7       	in	r24, 0x3f	; 63
 59a:	8f 77       	andi	r24, 0x7F	; 127
 59c:	8f bf       	out	0x3f, r24	; 63
 59e:	81 e0       	ldi	r24, 0x01	; 1
 5a0:	01 c0       	rjmp	.+2      	; 0x5a4 <M_Eeprom_Write+0x18>
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	e2 9a       	sbi	0x1c, 2	; 28
 5a6:	e1 9a       	sbi	0x1c, 1	; 28
 5a8:	e1 99       	sbic	0x1c, 1	; 28
 5aa:	fe cf       	rjmp	.-4      	; 0x5a8 <M_Eeprom_Write+0x1c>
 5ac:	81 30       	cpi	r24, 0x01	; 1
 5ae:	19 f4       	brne	.+6      	; 0x5b6 <M_Eeprom_Write+0x2a>
 5b0:	8f b7       	in	r24, 0x3f	; 63
 5b2:	80 68       	ori	r24, 0x80	; 128
 5b4:	8f bf       	out	0x3f, r24	; 63
 5b6:	08 95       	ret

000005b8 <M_Timer1_Init>:
 5b8:	8e b5       	in	r24, 0x2e	; 46
 5ba:	88 60       	ori	r24, 0x08	; 8
 5bc:	8e bd       	out	0x2e, r24	; 46
 5be:	1b bc       	out	0x2b, r1	; 43
 5c0:	82 e6       	ldi	r24, 0x62	; 98
 5c2:	8a bd       	out	0x2a, r24	; 42
 5c4:	8e b5       	in	r24, 0x2e	; 46
 5c6:	81 60       	ori	r24, 0x01	; 1
 5c8:	8e bd       	out	0x2e, r24	; 46
 5ca:	8e b5       	in	r24, 0x2e	; 46
 5cc:	8d 7f       	andi	r24, 0xFD	; 253
 5ce:	8e bd       	out	0x2e, r24	; 46
 5d0:	8e b5       	in	r24, 0x2e	; 46
 5d2:	84 60       	ori	r24, 0x04	; 4
 5d4:	8e bd       	out	0x2e, r24	; 46
 5d6:	78 94       	sei
 5d8:	08 95       	ret

000005da <M_Timer0_Init>:
 5da:	83 b7       	in	r24, 0x33	; 51
 5dc:	88 60       	ori	r24, 0x08	; 8
 5de:	83 bf       	out	0x33, r24	; 51
 5e0:	8a ef       	ldi	r24, 0xFA	; 250
 5e2:	8c bf       	out	0x3c, r24	; 60
 5e4:	83 b7       	in	r24, 0x33	; 51
 5e6:	81 60       	ori	r24, 0x01	; 1
 5e8:	83 bf       	out	0x33, r24	; 51
 5ea:	83 b7       	in	r24, 0x33	; 51
 5ec:	84 60       	ori	r24, 0x04	; 4
 5ee:	83 bf       	out	0x33, r24	; 51
 5f0:	78 94       	sei
 5f2:	89 b7       	in	r24, 0x39	; 57
 5f4:	82 60       	ori	r24, 0x02	; 2
 5f6:	89 bf       	out	0x39, r24	; 57
 5f8:	08 95       	ret

000005fa <M_Timer1_IntEnable>:
 5fa:	89 b7       	in	r24, 0x39	; 57
 5fc:	80 61       	ori	r24, 0x10	; 16
 5fe:	89 bf       	out	0x39, r24	; 57
 600:	08 95       	ret

00000602 <__fixunssfsi>:
 602:	0e 94 75 03 	call	0x6ea	; 0x6ea <__fp_splitA>
 606:	88 f0       	brcs	.+34     	; 0x62a <__fixunssfsi+0x28>
 608:	9f 57       	subi	r25, 0x7F	; 127
 60a:	98 f0       	brcs	.+38     	; 0x632 <__fixunssfsi+0x30>
 60c:	b9 2f       	mov	r27, r25
 60e:	99 27       	eor	r25, r25
 610:	b7 51       	subi	r27, 0x17	; 23
 612:	b0 f0       	brcs	.+44     	; 0x640 <__fixunssfsi+0x3e>
 614:	e1 f0       	breq	.+56     	; 0x64e <__fixunssfsi+0x4c>
 616:	66 0f       	add	r22, r22
 618:	77 1f       	adc	r23, r23
 61a:	88 1f       	adc	r24, r24
 61c:	99 1f       	adc	r25, r25
 61e:	1a f0       	brmi	.+6      	; 0x626 <__fixunssfsi+0x24>
 620:	ba 95       	dec	r27
 622:	c9 f7       	brne	.-14     	; 0x616 <__fixunssfsi+0x14>
 624:	14 c0       	rjmp	.+40     	; 0x64e <__fixunssfsi+0x4c>
 626:	b1 30       	cpi	r27, 0x01	; 1
 628:	91 f0       	breq	.+36     	; 0x64e <__fixunssfsi+0x4c>
 62a:	0e 94 8f 03 	call	0x71e	; 0x71e <__fp_zero>
 62e:	b1 e0       	ldi	r27, 0x01	; 1
 630:	08 95       	ret
 632:	0c 94 8f 03 	jmp	0x71e	; 0x71e <__fp_zero>
 636:	67 2f       	mov	r22, r23
 638:	78 2f       	mov	r23, r24
 63a:	88 27       	eor	r24, r24
 63c:	b8 5f       	subi	r27, 0xF8	; 248
 63e:	39 f0       	breq	.+14     	; 0x64e <__fixunssfsi+0x4c>
 640:	b9 3f       	cpi	r27, 0xF9	; 249
 642:	cc f3       	brlt	.-14     	; 0x636 <__fixunssfsi+0x34>
 644:	86 95       	lsr	r24
 646:	77 95       	ror	r23
 648:	67 95       	ror	r22
 64a:	b3 95       	inc	r27
 64c:	d9 f7       	brne	.-10     	; 0x644 <__fixunssfsi+0x42>
 64e:	3e f4       	brtc	.+14     	; 0x65e <__fixunssfsi+0x5c>
 650:	90 95       	com	r25
 652:	80 95       	com	r24
 654:	70 95       	com	r23
 656:	61 95       	neg	r22
 658:	7f 4f       	sbci	r23, 0xFF	; 255
 65a:	8f 4f       	sbci	r24, 0xFF	; 255
 65c:	9f 4f       	sbci	r25, 0xFF	; 255
 65e:	08 95       	ret

00000660 <__floatunsisf>:
 660:	e8 94       	clt
 662:	09 c0       	rjmp	.+18     	; 0x676 <__floatsisf+0x12>

00000664 <__floatsisf>:
 664:	97 fb       	bst	r25, 7
 666:	3e f4       	brtc	.+14     	; 0x676 <__floatsisf+0x12>
 668:	90 95       	com	r25
 66a:	80 95       	com	r24
 66c:	70 95       	com	r23
 66e:	61 95       	neg	r22
 670:	7f 4f       	sbci	r23, 0xFF	; 255
 672:	8f 4f       	sbci	r24, 0xFF	; 255
 674:	9f 4f       	sbci	r25, 0xFF	; 255
 676:	99 23       	and	r25, r25
 678:	a9 f0       	breq	.+42     	; 0x6a4 <__floatsisf+0x40>
 67a:	f9 2f       	mov	r31, r25
 67c:	96 e9       	ldi	r25, 0x96	; 150
 67e:	bb 27       	eor	r27, r27
 680:	93 95       	inc	r25
 682:	f6 95       	lsr	r31
 684:	87 95       	ror	r24
 686:	77 95       	ror	r23
 688:	67 95       	ror	r22
 68a:	b7 95       	ror	r27
 68c:	f1 11       	cpse	r31, r1
 68e:	f8 cf       	rjmp	.-16     	; 0x680 <__floatsisf+0x1c>
 690:	fa f4       	brpl	.+62     	; 0x6d0 <__floatsisf+0x6c>
 692:	bb 0f       	add	r27, r27
 694:	11 f4       	brne	.+4      	; 0x69a <__floatsisf+0x36>
 696:	60 ff       	sbrs	r22, 0
 698:	1b c0       	rjmp	.+54     	; 0x6d0 <__floatsisf+0x6c>
 69a:	6f 5f       	subi	r22, 0xFF	; 255
 69c:	7f 4f       	sbci	r23, 0xFF	; 255
 69e:	8f 4f       	sbci	r24, 0xFF	; 255
 6a0:	9f 4f       	sbci	r25, 0xFF	; 255
 6a2:	16 c0       	rjmp	.+44     	; 0x6d0 <__floatsisf+0x6c>
 6a4:	88 23       	and	r24, r24
 6a6:	11 f0       	breq	.+4      	; 0x6ac <__floatsisf+0x48>
 6a8:	96 e9       	ldi	r25, 0x96	; 150
 6aa:	11 c0       	rjmp	.+34     	; 0x6ce <__floatsisf+0x6a>
 6ac:	77 23       	and	r23, r23
 6ae:	21 f0       	breq	.+8      	; 0x6b8 <__floatsisf+0x54>
 6b0:	9e e8       	ldi	r25, 0x8E	; 142
 6b2:	87 2f       	mov	r24, r23
 6b4:	76 2f       	mov	r23, r22
 6b6:	05 c0       	rjmp	.+10     	; 0x6c2 <__floatsisf+0x5e>
 6b8:	66 23       	and	r22, r22
 6ba:	71 f0       	breq	.+28     	; 0x6d8 <__floatsisf+0x74>
 6bc:	96 e8       	ldi	r25, 0x86	; 134
 6be:	86 2f       	mov	r24, r22
 6c0:	70 e0       	ldi	r23, 0x00	; 0
 6c2:	60 e0       	ldi	r22, 0x00	; 0
 6c4:	2a f0       	brmi	.+10     	; 0x6d0 <__floatsisf+0x6c>
 6c6:	9a 95       	dec	r25
 6c8:	66 0f       	add	r22, r22
 6ca:	77 1f       	adc	r23, r23
 6cc:	88 1f       	adc	r24, r24
 6ce:	da f7       	brpl	.-10     	; 0x6c6 <__floatsisf+0x62>
 6d0:	88 0f       	add	r24, r24
 6d2:	96 95       	lsr	r25
 6d4:	87 95       	ror	r24
 6d6:	97 f9       	bld	r25, 7
 6d8:	08 95       	ret

000006da <__fp_split3>:
 6da:	57 fd       	sbrc	r21, 7
 6dc:	90 58       	subi	r25, 0x80	; 128
 6de:	44 0f       	add	r20, r20
 6e0:	55 1f       	adc	r21, r21
 6e2:	59 f0       	breq	.+22     	; 0x6fa <__fp_splitA+0x10>
 6e4:	5f 3f       	cpi	r21, 0xFF	; 255
 6e6:	71 f0       	breq	.+28     	; 0x704 <__fp_splitA+0x1a>
 6e8:	47 95       	ror	r20

000006ea <__fp_splitA>:
 6ea:	88 0f       	add	r24, r24
 6ec:	97 fb       	bst	r25, 7
 6ee:	99 1f       	adc	r25, r25
 6f0:	61 f0       	breq	.+24     	; 0x70a <__fp_splitA+0x20>
 6f2:	9f 3f       	cpi	r25, 0xFF	; 255
 6f4:	79 f0       	breq	.+30     	; 0x714 <__fp_splitA+0x2a>
 6f6:	87 95       	ror	r24
 6f8:	08 95       	ret
 6fa:	12 16       	cp	r1, r18
 6fc:	13 06       	cpc	r1, r19
 6fe:	14 06       	cpc	r1, r20
 700:	55 1f       	adc	r21, r21
 702:	f2 cf       	rjmp	.-28     	; 0x6e8 <__fp_split3+0xe>
 704:	46 95       	lsr	r20
 706:	f1 df       	rcall	.-30     	; 0x6ea <__fp_splitA>
 708:	08 c0       	rjmp	.+16     	; 0x71a <__fp_splitA+0x30>
 70a:	16 16       	cp	r1, r22
 70c:	17 06       	cpc	r1, r23
 70e:	18 06       	cpc	r1, r24
 710:	99 1f       	adc	r25, r25
 712:	f1 cf       	rjmp	.-30     	; 0x6f6 <__fp_splitA+0xc>
 714:	86 95       	lsr	r24
 716:	71 05       	cpc	r23, r1
 718:	61 05       	cpc	r22, r1
 71a:	08 94       	sec
 71c:	08 95       	ret

0000071e <__fp_zero>:
 71e:	e8 94       	clt

00000720 <__fp_szero>:
 720:	bb 27       	eor	r27, r27
 722:	66 27       	eor	r22, r22
 724:	77 27       	eor	r23, r23
 726:	cb 01       	movw	r24, r22
 728:	97 f9       	bld	r25, 7
 72a:	08 95       	ret

0000072c <__mulsf3>:
 72c:	0e 94 a9 03 	call	0x752	; 0x752 <__mulsf3x>
 730:	0c 94 1a 04 	jmp	0x834	; 0x834 <__fp_round>
 734:	0e 94 0c 04 	call	0x818	; 0x818 <__fp_pscA>
 738:	38 f0       	brcs	.+14     	; 0x748 <__mulsf3+0x1c>
 73a:	0e 94 13 04 	call	0x826	; 0x826 <__fp_pscB>
 73e:	20 f0       	brcs	.+8      	; 0x748 <__mulsf3+0x1c>
 740:	95 23       	and	r25, r21
 742:	11 f0       	breq	.+4      	; 0x748 <__mulsf3+0x1c>
 744:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_inf>
 748:	0c 94 09 04 	jmp	0x812	; 0x812 <__fp_nan>
 74c:	11 24       	eor	r1, r1
 74e:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_szero>

00000752 <__mulsf3x>:
 752:	0e 94 6d 03 	call	0x6da	; 0x6da <__fp_split3>
 756:	70 f3       	brcs	.-36     	; 0x734 <__mulsf3+0x8>

00000758 <__mulsf3_pse>:
 758:	95 9f       	mul	r25, r21
 75a:	c1 f3       	breq	.-16     	; 0x74c <__mulsf3+0x20>
 75c:	95 0f       	add	r25, r21
 75e:	50 e0       	ldi	r21, 0x00	; 0
 760:	55 1f       	adc	r21, r21
 762:	62 9f       	mul	r22, r18
 764:	f0 01       	movw	r30, r0
 766:	72 9f       	mul	r23, r18
 768:	bb 27       	eor	r27, r27
 76a:	f0 0d       	add	r31, r0
 76c:	b1 1d       	adc	r27, r1
 76e:	63 9f       	mul	r22, r19
 770:	aa 27       	eor	r26, r26
 772:	f0 0d       	add	r31, r0
 774:	b1 1d       	adc	r27, r1
 776:	aa 1f       	adc	r26, r26
 778:	64 9f       	mul	r22, r20
 77a:	66 27       	eor	r22, r22
 77c:	b0 0d       	add	r27, r0
 77e:	a1 1d       	adc	r26, r1
 780:	66 1f       	adc	r22, r22
 782:	82 9f       	mul	r24, r18
 784:	22 27       	eor	r18, r18
 786:	b0 0d       	add	r27, r0
 788:	a1 1d       	adc	r26, r1
 78a:	62 1f       	adc	r22, r18
 78c:	73 9f       	mul	r23, r19
 78e:	b0 0d       	add	r27, r0
 790:	a1 1d       	adc	r26, r1
 792:	62 1f       	adc	r22, r18
 794:	83 9f       	mul	r24, r19
 796:	a0 0d       	add	r26, r0
 798:	61 1d       	adc	r22, r1
 79a:	22 1f       	adc	r18, r18
 79c:	74 9f       	mul	r23, r20
 79e:	33 27       	eor	r19, r19
 7a0:	a0 0d       	add	r26, r0
 7a2:	61 1d       	adc	r22, r1
 7a4:	23 1f       	adc	r18, r19
 7a6:	84 9f       	mul	r24, r20
 7a8:	60 0d       	add	r22, r0
 7aa:	21 1d       	adc	r18, r1
 7ac:	82 2f       	mov	r24, r18
 7ae:	76 2f       	mov	r23, r22
 7b0:	6a 2f       	mov	r22, r26
 7b2:	11 24       	eor	r1, r1
 7b4:	9f 57       	subi	r25, 0x7F	; 127
 7b6:	50 40       	sbci	r21, 0x00	; 0
 7b8:	9a f0       	brmi	.+38     	; 0x7e0 <__mulsf3_pse+0x88>
 7ba:	f1 f0       	breq	.+60     	; 0x7f8 <__mulsf3_pse+0xa0>
 7bc:	88 23       	and	r24, r24
 7be:	4a f0       	brmi	.+18     	; 0x7d2 <__mulsf3_pse+0x7a>
 7c0:	ee 0f       	add	r30, r30
 7c2:	ff 1f       	adc	r31, r31
 7c4:	bb 1f       	adc	r27, r27
 7c6:	66 1f       	adc	r22, r22
 7c8:	77 1f       	adc	r23, r23
 7ca:	88 1f       	adc	r24, r24
 7cc:	91 50       	subi	r25, 0x01	; 1
 7ce:	50 40       	sbci	r21, 0x00	; 0
 7d0:	a9 f7       	brne	.-22     	; 0x7bc <__mulsf3_pse+0x64>
 7d2:	9e 3f       	cpi	r25, 0xFE	; 254
 7d4:	51 05       	cpc	r21, r1
 7d6:	80 f0       	brcs	.+32     	; 0x7f8 <__mulsf3_pse+0xa0>
 7d8:	0c 94 03 04 	jmp	0x806	; 0x806 <__fp_inf>
 7dc:	0c 94 90 03 	jmp	0x720	; 0x720 <__fp_szero>
 7e0:	5f 3f       	cpi	r21, 0xFF	; 255
 7e2:	e4 f3       	brlt	.-8      	; 0x7dc <__mulsf3_pse+0x84>
 7e4:	98 3e       	cpi	r25, 0xE8	; 232
 7e6:	d4 f3       	brlt	.-12     	; 0x7dc <__mulsf3_pse+0x84>
 7e8:	86 95       	lsr	r24
 7ea:	77 95       	ror	r23
 7ec:	67 95       	ror	r22
 7ee:	b7 95       	ror	r27
 7f0:	f7 95       	ror	r31
 7f2:	e7 95       	ror	r30
 7f4:	9f 5f       	subi	r25, 0xFF	; 255
 7f6:	c1 f7       	brne	.-16     	; 0x7e8 <__mulsf3_pse+0x90>
 7f8:	fe 2b       	or	r31, r30
 7fa:	88 0f       	add	r24, r24
 7fc:	91 1d       	adc	r25, r1
 7fe:	96 95       	lsr	r25
 800:	87 95       	ror	r24
 802:	97 f9       	bld	r25, 7
 804:	08 95       	ret

00000806 <__fp_inf>:
 806:	97 f9       	bld	r25, 7
 808:	9f 67       	ori	r25, 0x7F	; 127
 80a:	80 e8       	ldi	r24, 0x80	; 128
 80c:	70 e0       	ldi	r23, 0x00	; 0
 80e:	60 e0       	ldi	r22, 0x00	; 0
 810:	08 95       	ret

00000812 <__fp_nan>:
 812:	9f ef       	ldi	r25, 0xFF	; 255
 814:	80 ec       	ldi	r24, 0xC0	; 192
 816:	08 95       	ret

00000818 <__fp_pscA>:
 818:	00 24       	eor	r0, r0
 81a:	0a 94       	dec	r0
 81c:	16 16       	cp	r1, r22
 81e:	17 06       	cpc	r1, r23
 820:	18 06       	cpc	r1, r24
 822:	09 06       	cpc	r0, r25
 824:	08 95       	ret

00000826 <__fp_pscB>:
 826:	00 24       	eor	r0, r0
 828:	0a 94       	dec	r0
 82a:	12 16       	cp	r1, r18
 82c:	13 06       	cpc	r1, r19
 82e:	14 06       	cpc	r1, r20
 830:	05 06       	cpc	r0, r21
 832:	08 95       	ret

00000834 <__fp_round>:
 834:	09 2e       	mov	r0, r25
 836:	03 94       	inc	r0
 838:	00 0c       	add	r0, r0
 83a:	11 f4       	brne	.+4      	; 0x840 <__fp_round+0xc>
 83c:	88 23       	and	r24, r24
 83e:	52 f0       	brmi	.+20     	; 0x854 <__fp_round+0x20>
 840:	bb 0f       	add	r27, r27
 842:	40 f4       	brcc	.+16     	; 0x854 <__fp_round+0x20>
 844:	bf 2b       	or	r27, r31
 846:	11 f4       	brne	.+4      	; 0x84c <__fp_round+0x18>
 848:	60 ff       	sbrs	r22, 0
 84a:	04 c0       	rjmp	.+8      	; 0x854 <__fp_round+0x20>
 84c:	6f 5f       	subi	r22, 0xFF	; 255
 84e:	7f 4f       	sbci	r23, 0xFF	; 255
 850:	8f 4f       	sbci	r24, 0xFF	; 255
 852:	9f 4f       	sbci	r25, 0xFF	; 255
 854:	08 95       	ret

00000856 <__divmodhi4>:
 856:	97 fb       	bst	r25, 7
 858:	07 2e       	mov	r0, r23
 85a:	16 f4       	brtc	.+4      	; 0x860 <__stack+0x1>
 85c:	00 94       	com	r0
 85e:	07 d0       	rcall	.+14     	; 0x86e <__divmodhi4_neg1>
 860:	77 fd       	sbrc	r23, 7
 862:	09 d0       	rcall	.+18     	; 0x876 <__divmodhi4_neg2>
 864:	0e 94 4e 04 	call	0x89c	; 0x89c <__udivmodhi4>
 868:	07 fc       	sbrc	r0, 7
 86a:	05 d0       	rcall	.+10     	; 0x876 <__divmodhi4_neg2>
 86c:	3e f4       	brtc	.+14     	; 0x87c <__divmodhi4_exit>

0000086e <__divmodhi4_neg1>:
 86e:	90 95       	com	r25
 870:	81 95       	neg	r24
 872:	9f 4f       	sbci	r25, 0xFF	; 255
 874:	08 95       	ret

00000876 <__divmodhi4_neg2>:
 876:	70 95       	com	r23
 878:	61 95       	neg	r22
 87a:	7f 4f       	sbci	r23, 0xFF	; 255

0000087c <__divmodhi4_exit>:
 87c:	08 95       	ret

0000087e <__umulhisi3>:
 87e:	a2 9f       	mul	r26, r18
 880:	b0 01       	movw	r22, r0
 882:	b3 9f       	mul	r27, r19
 884:	c0 01       	movw	r24, r0
 886:	a3 9f       	mul	r26, r19
 888:	70 0d       	add	r23, r0
 88a:	81 1d       	adc	r24, r1
 88c:	11 24       	eor	r1, r1
 88e:	91 1d       	adc	r25, r1
 890:	b2 9f       	mul	r27, r18
 892:	70 0d       	add	r23, r0
 894:	81 1d       	adc	r24, r1
 896:	11 24       	eor	r1, r1
 898:	91 1d       	adc	r25, r1
 89a:	08 95       	ret

0000089c <__udivmodhi4>:
 89c:	aa 1b       	sub	r26, r26
 89e:	bb 1b       	sub	r27, r27
 8a0:	51 e1       	ldi	r21, 0x11	; 17
 8a2:	07 c0       	rjmp	.+14     	; 0x8b2 <__udivmodhi4_ep>

000008a4 <__udivmodhi4_loop>:
 8a4:	aa 1f       	adc	r26, r26
 8a6:	bb 1f       	adc	r27, r27
 8a8:	a6 17       	cp	r26, r22
 8aa:	b7 07       	cpc	r27, r23
 8ac:	10 f0       	brcs	.+4      	; 0x8b2 <__udivmodhi4_ep>
 8ae:	a6 1b       	sub	r26, r22
 8b0:	b7 0b       	sbc	r27, r23

000008b2 <__udivmodhi4_ep>:
 8b2:	88 1f       	adc	r24, r24
 8b4:	99 1f       	adc	r25, r25
 8b6:	5a 95       	dec	r21
 8b8:	a9 f7       	brne	.-22     	; 0x8a4 <__udivmodhi4_loop>
 8ba:	80 95       	com	r24
 8bc:	90 95       	com	r25
 8be:	bc 01       	movw	r22, r24
 8c0:	cd 01       	movw	r24, r26
 8c2:	08 95       	ret

000008c4 <_exit>:
 8c4:	f8 94       	cli

000008c6 <__stop_program>:
 8c6:	ff cf       	rjmp	.-2      	; 0x8c6 <__stop_program>
